# This is an example of how to setup cloud-controller-manger as a Daemonset in your cluster.
# It assumes that your masters can run pods and has the role node-role.kubernetes.io/master
# Note that this Daemonset will not work straight out of the box for your cloud, this is
# meant to be a guideline.

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin # transform to name: system:cloud-controller-manager

subjects:
- kind: ServiceAccount
  name: cloud-controller-manager
  namespace: kube-system

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: osc-cloud-controller-manager
  name: osc-cloud-controller-manager
  namespace: kube-system
spec:
#  replicas: 1
#  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: osc-cloud-controller-manager
  template:
    metadata:
      labels:
        app: osc-cloud-controller-manager
#     annotations:
#        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
#     dnsPolicy: Default
#     hostNetwork: true
      serviceAccountName: cloud-controller-manager
      imagePullSecrets:
        - name: registry-dockerconfigjson
      containers:
      - name: osc-cloud-controller-manager
        # for in-tree providers we use k8s.gcr.io/cloud-controller-manager
        # this can be replaced with any other image for out-of-tree providers
        image: registry.kube-system:5001/osc/cloud-provider-osc:v1
        imagePullPolicy: Always
        command:
        - /bin/osc-cloud-controller-manager
        - --cloud-provider=external  # Add your own cloud provider here!
        - --leader-elect=true
        - --v=10
        - --logtostderr
        #- --use-service-account-credentials
        # these flags will vary for every cloud provider
        #- --allocate-node-cidrs=true
        #- --configure-cloud-routes=true
        #- --cluster-cidr=172.17.0.0/16
        #resources:
        #  requests:
        #    cpu: 100m
        #    memory: 50Mi
        env:
        #    NEED TO BE STORED ON A SECRETS
          - name: OSC_ACCOUNT_ID
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: osc_account_id
                optional: true
          - name: OSC_ACCOUNT_IAM
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: osc_account_iam
                optional: true
          - name: OSC_USER_ID
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: osc_user_id
                optional: true
          - name: OSC_ARN
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: osc_arn
                optional: true
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: key_id
                optional: true
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: access_key
                optional: true
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: aws_default_region
                optional: true
          - name: AWS_AVAILABILITY_ZONES
            valueFrom:
              secretKeyRef:
                name: osc-secret
                key: aws_availability_zones
                optional: true

      tolerations:
      # this taint is set by all kubelets running `--cloud-provider=external`
      # so we should tolerate it to schedule the osc ccm
      # this is required so CCM can bootstrap itself
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      # cloud controller manages should be able to run on masters
      # this is to have the daemonset runnable on master nodes
      # the taint may vary depending on your cluster setup
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      #- key: "CriticalAddonsOnly"
      #  operator: "Exists"
      # this is to restrict CCM to only run on master nodes
      # the node selector may vary depending on your cluster setup
      #nodeSelector:
      #  node-role.kubernetes.io/master: ""
